#pragma once
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <fstream> // Чтение файлов
#include <sstream> // Парсинг строк
#include "logger.h"
#include "cli_io.h"

namespace blink_config {
    // ### Загружает конфигурацию из указанного файла.
    // 
    // Описание:
    // - Читает конфигурационный файл построчно.
    // - Игнорирует пустые строки и комментарии ( строки, начинающиеся с # ).
    // - Поддерживает многострочные значения:
    //   - Если строка начинается с пробела или таба,
    //     она считается продолжением предыдущего значения.
    // - Каждое значение привязывается к ключу, заданному в формате: key = value.
    // - Пробелы у значений автоматически обрезаются с начала и конца.
    // - Все пары сохраняются в карту config_map.
    bool load( const std::string& path = "configs/core.conf" );

    // ### Возвращает значение параметра из конфигурации.
    // 
    // Аргументы:
    // - key: имя параметра.
    // - fallback: значение по умолчанию, если параметр не найден.
    // 
    // Возвращает:
    // - Значение параметра или fallback, если параметр отсутствует.
    std::string get( const std::string& key, const std::string& fallback = "" );

    // ### Выводит содержимое конфигурации в консоль.
    // - Показывает все пары ключ = значение.
    // - Используется для отладки.
    void print();

    // ### Инициализирует систему конфигураций.
    // 
    // Выполняет:
    // 1. Загрузка конфигурационного файла.
    // 2. Вывод сообщения о запуске конфигурации.
    void init();

    // ### Позволяет изменить значение конфига во время выполнения программы, но не самого файла.
    //
    // Подробности:
    // - Два параметра:
    // - - key - ключ котрому будет присвоено новое значение (не может быть пустым).
    // - - value - новое значение которое будет присвоено ключу или пустное.
    // - Выполняет:
    // - - Замену значения из карты ключей и значений по переданному ключу.
    // - - Добавляет ключ в dirty_keys, для возможности сохранить изменения в файле.
    // - - Возвращает false, если ключ не найден (не создат новый ключ).
    bool set( const std::string& key, const std::string& value = "" );

    // ### Сохраняет изменения конфига во время выполнения программы.
    // 
    // Выполняет:
    // - Проверяет dirty_keys - если изменений нет, пропускает сохранение.
    // - Читает файл построчно - сохраняет все строки (включая комментарии).
    // - Обновляет только измененные ключи - ищет строки вида key = value и заменяет их.
    // - Сохраняет файл - с оригинальным форматированием.
    bool save( const std::string& path = "configs/core.conf" );
}
