#pragma once

#include <fstream>  // Для работы с файлами
#include <filesystem> // Для работы с директориями
#include <iostream> // Для вывода в консоль
#include <chrono>   // Для работы со временем
#include <iomanip>  // Для форматирования вывода
#include <ctime>    // Для преобразования времени в строку
#include <vector>   // Для работы с вектором
#include <algorithm> // Для сортировки внутри вектора

// Перечисление для типов сообщений
enum class log_level {
    INFO,
    WARNING,
    ERROR,
    FATAL,
    DEBUG,
    TRACE,
};

namespace blink_logger {
    // Удаляет устаревшие лог-файлы, если их количество превышает заданный лимит.
    //
    // Поведение:
    // - Сканирует директорию "logs/" на наличие .txt-файлов.
    // - Сортирует их по времени изменения (сначала самые новые).
    // - Удаляет все файлы, начиная с позиции max_logs.
    //
    // Аргументы:
    // - max_logs: Максимальное количество логов, которые нужно сохранить (по умолчанию — 7).
    void cleanup_logs( int max_logs = 7 );

    // Возвращает текущую дату и время в виде строки.
    //
    // Формат:
    // - "гггг-мм-дд чч:мм:сс" (например, 2025-06-29 21:08:47)
    //
    // Используется:
    // - для именования файлов логов;
    // - для префиксов времени в сообщениях.
    std::string get_current_time();
    
    // Записывает сообщение в лог-файл и выводит его в CLI.
    //
    // Поведение:
    // - Генерирует строку времени и уровень логирования.
    // - Создаёт директорию logs/, если её нет.
    // - Записывает сообщение в лог-файл за текущую дату (log_YYYY-MM-DD.txt).
    // - Дублирует сообщение в std::cerr.
    //
    // Аргументы:
    // - message: Текст сообщения для записи.
    // - level: Уровень важности (INFO, WARNING, ERROR и т.д.).
    void log( const std::string& message, log_level level = log_level::INFO );
    
    // Инициализирует систему логирования.
    //
    // Действия:
    // 1. Создаёт директорию logs/, если она не существует.
    // 2. Очищает устаревшие логи (оставляет только последние N файлов).
    // 3. Записывает сообщение о старте логгера.
    void init();
    
    // Завершает лог-сессию, добавляя пустую строку в конец лог-файла.
    //
    // Используется:
    // - для визуального отделения логов разных сессий.
    void shutdown();
}